/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ShareSampleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyShares"
      | "decreaseSubscriptionPool"
      | "getBuyPrice"
      | "getCurrentPrice"
      | "getMinimumSubPool"
      | "getPrice"
      | "getSellPrice"
      | "getSubscriptionPoolRemaining"
      | "getSupply"
      | "increaseSubscriptionPool"
      | "ping"
      | "reapAndWithdrawFees"
      | "reapSafForTokenIds"
      | "sellShares"
      | "withdrawAccumulatedFees"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FeeCollected" | "Trade"): EventFragment;

  encodeFunctionData(
    functionFragment: "buyShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseSubscriptionPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumSubPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionPoolRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseSubscriptionPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ping", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reapAndWithdrawFees",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reapSafForTokenIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sellShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAccumulatedFees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseSubscriptionPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumSubPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionPoolRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseSubscriptionPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ping", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reapAndWithdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reapSafForTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAccumulatedFees",
    data: BytesLike
  ): Result;
}

export namespace FeeCollectedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    feeCollected: BigNumberish,
    subscriptionPoolRemaining: BigNumberish,
    liquidationStartedAt: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    feeCollected: bigint,
    subscriptionPoolRemaining: bigint,
    liquidationStartedAt: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    feeCollected: bigint;
    subscriptionPoolRemaining: bigint;
    liquidationStartedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    trader: AddressLike,
    subject: AddressLike,
    isBuy: boolean,
    shareAmount: BigNumberish,
    ethAmount: BigNumberish,
    supply: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    subject: string,
    isBuy: boolean,
    shareAmount: bigint,
    ethAmount: bigint,
    supply: bigint
  ];
  export interface OutputObject {
    trader: string;
    subject: string;
    isBuy: boolean;
    shareAmount: bigint;
    ethAmount: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShareSample extends BaseContract {
  connect(runner?: ContractRunner | null): ShareSample;
  waitForDeployment(): Promise<this>;

  interface: ShareSampleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyShares: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  decreaseSubscriptionPool: TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBuyPrice: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  getCurrentPrice: TypedContractMethod<[], [bigint], "view">;

  getMinimumSubPool: TypedContractMethod<[], [bigint], "view">;

  getPrice: TypedContractMethod<
    [_supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPrice: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  getSubscriptionPoolRemaining: TypedContractMethod<[], [bigint], "view">;

  getSupply: TypedContractMethod<[], [bigint], "view">;

  increaseSubscriptionPool: TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ping: TypedContractMethod<[], [bigint], "payable">;

  reapAndWithdrawFees: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  reapSafForTokenIds: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  sellShares: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  withdrawAccumulatedFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyShares"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "decreaseSubscriptionPool"
  ): TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBuyPrice"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumSubPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [_supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPrice"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSubscriptionPoolRemaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseSubscriptionPool"
  ): TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ping"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "reapAndWithdrawFees"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reapSafForTokenIds"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellShares"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "withdrawAccumulatedFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "FeeCollected"
  ): TypedContractEvent<
    FeeCollectedEvent.InputTuple,
    FeeCollectedEvent.OutputTuple,
    FeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;

  filters: {
    "FeeCollected(uint256,uint256,uint256,uint256)": TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;
    FeeCollected: TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;

    "Trade(address,address,bool,uint256,uint256,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
  };
}
