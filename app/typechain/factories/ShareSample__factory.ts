/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { ShareSample, ShareSampleInterface } from "../ShareSample";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_subscriptionRate",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_sharesSubject",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InsufficientSubscriptionPool",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAlterPriceValue",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAlterSubscriptionPoolValue",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAssessmentFee",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeCollected",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "subscriptionPoolRemaining",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidationStartedAt",
        type: "uint256",
      },
    ],
    name: "FeeCollected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "subject",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isBuy",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shareAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    name: "Trade",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "buyShares",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "decreaseSubscriptionPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getBuyPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMinimumSubPool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_supply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getSellPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSubscriptionPoolRemaining",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseSubscriptionPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ping",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "reapAndWithdrawFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "reapSafForTokenIds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sellShares",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAccumulatedFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526103e860035561271060045561271060055534801561002257600080fd5b50604051610ea8380380610ea883398101604081905261004191610097565b600191909155600a80546001600160a01b039384166001600160a01b031991821617909155600b80549390921692169190911790556100d3565b80516001600160a01b038116811461009257600080fd5b919050565b6000806000606084860312156100ac57600080fd5b6100b58461007b565b9250602084015191506100ca6040850161007b565b90509250925092565b610dc6806100e26000396000f3fe6080604052600436106100e85760003560e01c80635c36b1861161008a578063ba730e5311610059578063ba730e53146101ff578063c4d676a1146100ed578063d1a93d181461021f578063eb91d37e1461023257600080fd5b80635c36b186146101a35780635cf4ee91146101aa5780636c9c2faf146101ca5780639a8a6370146101df57600080fd5b806312698ef3116100c657806312698ef31461015557806322a295a8146101705780632e185ec7146101845780634ba8ae811461019057600080fd5b806301814e14146100ed57806308d4db141461010e57806309cd849314610140575b600080fd5b3480156100f957600080fd5b5061010c610108366004610bee565b5050565b005b34801561011a57600080fd5b5061012e610129366004610c10565b610247565b60405190815260200160405180910390f35b34801561014c57600080fd5b5061012e61025b565b34801561016157600080fd5b5061010c610108366004610c29565b34801561017c57600080fd5b50600061012e565b34801561010c57600080fd5b61010c61019e366004610c10565b61028e565b600161012e565b3480156101b657600080fd5b5061012e6101c5366004610bee565b610473565b3480156101d657600080fd5b5060085461012e565b3480156101eb57600080fd5b5061010c6101fa366004610c29565b610108565b34801561020b57600080fd5b5061012e61021a366004610c10565b610594565b61010c61022d366004610c10565b6105a7565b34801561023e57600080fd5b5061012e610995565b600061025560085483610473565b92915050565b33600081815260076020526040812054600854919283926102879290610282906001610473565b6109a9565b5092915050565b80600854116102e45760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073656c6c20746865206c61737420736861726500000000000060448201526064015b60405180910390fd5b60006102fd826008546102f79190610cb4565b83610473565b336000908152600760205260409020549091508211156103555760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073686172657360681b60448201526064016102db565b33600081815260076020526040812054909182916103769190610282610995565b336000908152600760205260409020549193509150610396908590610cb4565b336000908152600760205260409020556008546103b4908590610cb4565b6008553360009081526020819052604090208281554260019091015580600960008282546103e29190610cc7565b9091555050600b546008547ff7dd8a134438de4c59401760e24ef5c6cc9c74583b2b022085697f3021e597689133916001600160a01b03909116906000908890889061042f908390610cb4565b604080516001600160a01b039788168152959096166020860152921515848601526060840191909152608083015260a082015290519081900360c00190a150505050565b60008083156104ce576006610489600186610cb4565b610494906002610cda565b61049f906001610cc7565b856104ab600182610cb4565b6104b59190610cda565b6104bf9190610cda565b6104c99190610cf1565b6104d1565b60005b90506000841580156104e35750836001145b610558576006846104f5600188610cb4565b6104ff9190610cc7565b61050a906002610cda565b610515906001610cc7565b61051f8688610cc7565b8661052b60018a610cb4565b6105359190610cc7565b61053f9190610cda565b6105499190610cda565b6105539190610cf1565b61055b565b60005b905060006105698383610cb4565b9050613e8061058082670de0b6b3a7640000610cda565b61058a9190610cf1565b9695505050505050565b6000610255826008546102f79190610cb4565b6105cd60405180604001604052806005815260200164068657265360dc1b815250610a1e565b600060085411806105e85750600b546001600160a01b031633145b61064d5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652073686172657327207375626a6563742063616e2062757960448201526f2074686520666972737420736861726560801b60648201526084016102db565b61067360405180604001604052806005815260200164686572653160d81b815250610a1e565b600061068160085483610473565b905060006106a56106a0846008546106999190610cc7565b6001610473565b610a64565b90508134116106ef5760405162461bcd60e51b8152602060048201526016602482015275496e75736666696369656e74206e667420707269636560501b60448201526064016102db565b610715604051806040016040528060058152602001643432b9329960d91b815250610a1e565b60006107218334610cb4565b3360008181526007602052604081205492935091829161074391610282610995565b909250905060006107548385610cc7565b905084811161079c5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016102db565b6107c260405180604001604052806005815260200164686572653360d81b815250610a1e565b81600960008282546107d49190610cc7565b9091555061088990506107e5610995565b60408051606081018252428152602081019283526001805492820192835260028054918201815560005290517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace60039092029182015591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830155517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155565b336000908152600760205260409020546108a4908890610cc7565b336000908152600760205260409020556008546108c2908890610cc7565b60085533600090815260208190526040902081815542600190910155610904604051806040016040528060058152602001641a195c994d60da1b815250610a1e565b7ff7dd8a134438de4c59401760e24ef5c6cc9c74583b2b022085697f3021e5976833600b60009054906101000a90046001600160a01b031660018a8a8c60085461094e9190610cc7565b604080516001600160a01b039788168152959096166020860152921515848601526060840191909152608083015260a082015290519081900360c00190a150505050505050565b60006109a46008546001610473565b905090565b6001600160a01b03831660009081526020818152604080832081518083019092528054808352600190910154928201839052839283916109eb91879189610a81565b82519091508110610a0357600093509150610a169050565b8151610a10908290610cb4565b93509150505b935093915050565b610a6181604051602401610a329190610d13565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610b8a565b50565b600061271060035483610a779190610cda565b6102559190610cf1565b6000808085815b600254811015610b5957600060028281548110610aa757610aa7610d61565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090508281600001511115610b46576000610b0682602001518584600001518560400151610bab565b610b109089610cda565b9050610b1c8187610cc7565b955088861115610b3457859650505050505050610b82565b81519350610b428186610cc7565b9450505b5080610b5181610d77565b915050610a88565b50610b68888242600154610bab565b610b729086610cda565b610b7c9084610cc7565b93505050505b949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000610bbd6301e13380612710610cda565b610bc78585610cb4565b610bd18785610cda565b610bdb9190610cda565b610be59190610cf1565b95945050505050565b60008060408385031215610c0157600080fd5b50508035926020909101359150565b600060208284031215610c2257600080fd5b5035919050565b60008060208385031215610c3c57600080fd5b823567ffffffffffffffff80821115610c5457600080fd5b818501915085601f830112610c6857600080fd5b813581811115610c7757600080fd5b8660208260051b8501011115610c8c57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561025557610255610c9e565b8082018082111561025557610255610c9e565b808202811582820484141761025557610255610c9e565b600082610d0e57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b81811015610d4057858101830151858201604001528201610d24565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052603260045260246000fd5b600060018201610d8957610d89610c9e565b506001019056fea26469706673582212205009e77d2bbf641fd7a9dd6441bb41aa0c96f38875d7079ae9d9d91449f1334b64736f6c63430008120033";

type ShareSampleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShareSampleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShareSample__factory extends ContractFactory {
  constructor(...args: ShareSampleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _withdrawAddress: AddressLike,
    _subscriptionRate: BigNumberish,
    _sharesSubject: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _withdrawAddress,
      _subscriptionRate,
      _sharesSubject,
      overrides || {}
    );
  }
  override deploy(
    _withdrawAddress: AddressLike,
    _subscriptionRate: BigNumberish,
    _sharesSubject: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _withdrawAddress,
      _subscriptionRate,
      _sharesSubject,
      overrides || {}
    ) as Promise<
      ShareSample & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ShareSample__factory {
    return super.connect(runner) as ShareSample__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShareSampleInterface {
    return new Interface(_abi) as ShareSampleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ShareSample {
    return new Contract(address, _abi, runner) as unknown as ShareSample;
  }
}
